class CustomTest extends DefaultTask {
    private boolean useCucumber = false
    private boolean verbose = false

    @Option(option = "useCucumber", description = "Whether to use cucumber to run the tests. Default is true.")
    void setUseCucumber(boolean useCucumber) {
        this.useCucumber = useCucumber
    }

    boolean getUseCucumber() {
        return useCucumber
    }

    @Option(option = "verbose", description = "More verbose output")
    void setVerbose(boolean verbose) {
        this.verbose = verbose
    }

    boolean getVerbose() {
        return verbose
    }
}

task customTest(type: CustomTest) {

    description = "Run all cucumber or non-cucumber tests. " +
            "Useful when we want to run the tests on already " +
            "installed apps and/or on work profiles. " +
            "Requires for the app to be already installed."
    group = "verification"

    String device = project.property("device")
    String flavor = project.property("flavor")
    boolean work = project.property("work")
    String useFakeManager = project.property("useFakeManager")
    String deviceText = device == null || device == "null" ? "" : " -s $device"
    // 1. Find the user for work profile if needed
    int user = 0
    if (work) {
        user = getCurrentUser(deviceText)
    }

    // 2. Assemble Android Test (dependency)
    afterEvaluate {
        android.defaultConfig.buildConfigField "int", "USER", "$user"
        dependsOn(tasks.getByName("assemble${flavor.capitalize()}${android.testBuildType.capitalize()}AndroidTest"))
    }

    doFirst {
        if (verbose) {
            println("Current configuration:" +
                    "\nwork = $work" +
                    "\nflavor = $flavor" +
                    "\nuseCucumber = $useCucumber" +
                    "\ndevice = $device" +
                    "\nuseFakeManager = $useFakeManager"
            )
        }
    }

    doLast {
        // 3. Uninstall previous test app
        try {
            execCommand("adb$deviceText uninstall com.fsck.k9.pEp.ui.activities.test", verbose)
        } catch (Throwable ex) {
            if (verbose) {
                ex.printStackTrace()
            }
        }
        // 4. Push test apk to device
        String folder = "${project.projectDir}/build/outputs/apk/androidTest/$flavor/${android.testBuildType}"
        String apkToPush = fileTree(folder).matching {
            include "**/*androidTest.apk"
        }.first()
        if (verbose) {
            println("apk to push is $apkToPush")
        }
        execCommand("adb$deviceText push $apkToPush /data/local/tmp/test.apk", verbose)
        // 5. Install test apk
        execCommand("adb$deviceText shell pm install --user $user -t -r /data/local/tmp/test.apk", verbose)
        // 6. Remove installed test apk
        execCommand("adb$deviceText shell rm /data/local/tmp/test.apk", verbose)
        // 7. Run test
        execCommand(
                "adb$deviceText shell am instrument --user $user -w -m -e useCucumber " +
                        "$useCucumber -e package com -e debug false " +
                        "com.fsck.k9.pEp.ui.activities.test/com.fsck.k9.pEp.ui.activities.test.CucumberTestCase",
                verbose
        )
    }
}

private void execCommand(String command, boolean verbose) {
    exec {
        if (verbose) {
            println("running command: $command")
        }
        commandLine command.split(' ')
    }
}

private int getCurrentUser(String deviceText) {
    String command = "adb$deviceText shell pm list users"
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine command.split(' ')
        standardOutput = stdout
    }
    String line = stdout.toString().readLines().find { it.contains("Work profile:") }
    if (line == null) {
        System.err.println("No work profile found in this device!")
        return 0
    }
    return line.substring(line.indexOf("{") + 1, line.indexOf(":Work")).toInteger()
}
