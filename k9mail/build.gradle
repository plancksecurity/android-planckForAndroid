def pEpEngineRevision = 2144
def pEpJNIAdapterRevision = 378
def version = "0.9.11.11"

def pEpTestEmailAddress = "\"$System.env.PEP_TEST_EMAIL_ADDRESS\""
def pEpTestEmailPassword = "\"$System.env.PEP_TEST_EMAIL_PASSWORD\""
def pEpTestEmailServer = "\"$System.env.PEP_TEST_EMAIL_SERVER\""

def pEpDragonEmail = "\"$System.env.PEP_DRAGON_EMAIL_ADDRESS\""
def pEpDragonPassword = "\"$System.env.PEP_DRAGON_PASSWORD\""
def pEpDragonServer = "\"$System.env.PEP_DRAGON_SERVER\""
def pEpDragonUsername = "\"$System.env.PEP_DRAGON_USERNAME\""

buildscript {
    repositories {
        mavenCentral()
    }
}

apply plugin: "com.android.application"

if (!rootProject.optimizeForDevelopment) {
    apply from: "../gradle/plugins/checkstyle-android.gradle"
    apply from: "../gradle/plugins/findbugs-android.gradle"
}

if (rootProject.testCoverage) {
    apply plugin: "jacoco"
}

repositories {
    jcenter()
    google()
}

ext {
    supportLibraryVersion = "26.1.0"
}

//noinspection GroovyAssignabilityCheck
configurations.all {
    resolutionStrategy {
        force "com.android.support:support-annotations:${androidSupportLibraryVersion}"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(":pEpJNIAdapter")
    implementation project(":k9mail-library")
    implementation project(":plugins:HoloColorPicker")
    implementation project(":plugins:openpgp-api-lib:openpgp-api")

    implementation "com.squareup.okio:okio:${okioVersion}"
    implementation "commons-io:commons-io:${apacheCommonsVersion}"
    implementation "com.android.support:support-v4:${androidSupportLibraryVersion}"
    implementation "org.jsoup:jsoup:${jsoupVersion}"
    implementation "com.github.bumptech.glide:glide:${glideVersion}"
    implementation "com.splitwise:tokenautocomplete:${tokenAutoCompleteVersion}"
    implementation "de.cketti.safecontentresolver:safe-content-resolver-v14:${safeContentResolverVersion}"
    implementation "com.github.amlcurran.showcaseview:library:${showCaseViewVersion}"
    implementation "com.squareup.moshi:moshi:${moshiVersion}"
    implementation "com.jakewharton.timber:timber:${timberVersion}"
    implementation "com.jakewharton:butterknife:${butterKnifeVersion}"
    implementation "uk.co.chrisjenx:calligraphy:${callygraphyVersion}"
    implementation "de.hdodenhof:circleimageview:${circleImageViewVersion}"
    implementation "com.github.pedrovgs:renderers:${renderersVersion}"
    implementation "ch.acra:acra:${acraVersion}"
    implementation "com.android.support:support-v4:${project.supportLibraryVersion}"
    implementation "com.android.support:support-vector-drawable:${project.supportLibraryVersion}"
    implementation "com.github.paolorotolo:appintro:${appIntroVersion}"
    implementation "com.daimajia.swipelayout:library:${swipeLayoutVersion}@aar"
    implementation "com.android.support:recyclerview-v7:${project.supportLibraryVersion}"
    implementation "com.android.support:cardview-v7:${project.supportLibraryVersion}"
    implementation "com.android.support:design:${project.supportLibraryVersion}"
    implementation "com.android.support:appcompat-v7:${project.supportLibraryVersion}"
    implementation "com.karumi:dexter:${dexterVersion}"
    implementation "com.hudomju:swipe-to-dismiss-undo:${swipeToDismissVersion}"

    androidTestImplementation "com.android.support.test.espresso:espresso-intents:${espressoVersion}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${espressoVersion}"

    testImplementation "org.robolectric:robolectric:${robolectricVersion}"
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.jdom:jdom2:2.0.6"

    // Arch dependencies
    annotationProcessor "com.google.dagger:dagger-compiler:2.4"
    implementation "com.google.dagger:dagger:2.4"
}

android {
    compileSdkVersion androidCompileSdkVersion.toInteger()
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        //Original config
//        applicationId "com.fsck.k9"
//        testApplicationId "com.fsck.k9.tests"

//        versionCode 23230
//        versionName "5.203"

        //applicationId "pep.android.k9"
        applicationId "${appId}"
        versionCode 73
//        versionName "0.9.9.2"
        minSdkVersion 21
        targetSdkVersion 25
        setProperty("archivesBaseName", "$version")
        generatedDensities = ["mdpi", "hdpi", "xhdpi"]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"


        vectorDrawables.useSupportLibrary = true


        buildConfigField "int", "ENGINE_REVISION", "${pEpEngineRevision}"
        buildConfigField "int", "ADAPTER_REVISION", "${pEpJNIAdapterRevision}"
        buildConfigField "String", "PEP_TEST_EMAIL_ADDRESS", "${pEpTestEmailAddress}"
        buildConfigField "String", "PEP_TEST_EMAIL_PASSWORD", "${pEpTestEmailPassword}"
        buildConfigField "String", "PEP_TEST_EMAIL_SERVER", "${pEpTestEmailServer}"

        buildConfigField "String", "PEP_DRAGON_EMAIL_ADDRESS", "${pEpDragonEmail}"
        buildConfigField "String", "PEP_DRAGON_PASSWORD", "${pEpDragonPassword}"
        buildConfigField "String", "PEP_DRAGON_SERVER", "${pEpDragonServer}"
        buildConfigField "String", "PEP_DRAGON_USERNAME", "${pEpDragonUsername}"

        javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true
    }
    flavorDimensions "playStore", "none"

    productFlavors {
        withkeysync {
            buildConfigField "boolean", "WITH_KEY_SYNC", "true"
            versionName "${version}" + ".withKeysync"
            dimension "playStore"

        }
        withthoutkeysync {
            buildConfigField "boolean", "WITH_KEY_SYNC", "false"
            versionName "${version}" + ".withoutKeysync"
            dimension "playStore"

        }
        playStore {
            dimension "none"
        }
    }
        signingConfigs {
        release
    }
    buildTypes {
        release {
            if (project.hasProperty("storeFile")) {
                signingConfig signingConfigs.release

            }

            buildConfigField "boolean", "DEVELOPER_MODE", "false"
        }

        debug {
            // applicationIdSuffix ".debug"
            testCoverageEnabled rootProject.testCoverage

            buildConfigField "boolean", "DEVELOPER_MODE", "true"
        }
    }
    // Do not abort build if lint finds errors
    lintOptions {
        abortOnError false
        lintConfig file("$rootProject.projectDir/config/lint/lint.xml")
    }
    packagingOptions {
        exclude "META-INF/DEPENDENCIES.txt"
        exclude "META-INF/DEPENDENCIES"
        exclude "META-INF/dependencies.txt"
        exclude "META-INF/LICENSE.txt"
        exclude "META-INF/LICENSE"
        exclude "META-INF/license.txt"
        exclude "META-INF/NOTICE.txt"
        exclude "META-INF/NOTICE"
        exclude "META-INF/notice.txt"
        exclude "META-INF/LGPL2.1"
        exclude "META-INF/README"
        exclude "LICENSE.txt"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    productFlavors {
    }

    splits {
        abi {
            enable true
            reset()
            include "armeabi-v7a"
//            include "x86"
            universalApk false
        }
    }
    buildToolsVersion "26.0.2"

//  Not compatible with gradle 4 and android studio 3.0
//    applicationVariants.all { variant ->
//        variant.outputs.all { output ->
//            outputFileName = "${variant.versionName}-${variant.versionCode}.apk"
//        }
//    }
}

if (project.hasProperty("keyAlias")) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty("keyPassword")) {
    android.signingConfigs.release.keyPassword = keyPassword
}
if (project.hasProperty("storeFile")) {
    android.signingConfigs.release.storeFile = file(storeFile)
}
if (project.hasProperty("storePassword")) {
    android.signingConfigs.release.storePassword = storePassword
}