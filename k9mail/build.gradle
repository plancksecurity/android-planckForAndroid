import com.android.build.OutputFile

def pEpTestEmailAddress = "\"$System.env.PEP_TEST_EMAIL_ADDRESS\""
def pEpTestEmailPassword = "\"$System.env.PEP_TEST_EMAIL_PASSWORD\""
def pEpTestEmailServer = "\"$System.env.PEP_TEST_EMAIL_SERVER\""

def pEpDragonEmail = "\"$System.env.PEP_DRAGON_EMAIL_ADDRESS\""
def pEpDragonPassword = "\"$System.env.PEP_DRAGON_PASSWORD\""
def pEpDragonServer = "\"$System.env.PEP_DRAGON_SERVER\""
def pEpDragonUsername = "\"$System.env.PEP_DRAGON_USERNAME\""

buildscript {
    repositories {
        mavenCentral()
    }
}

apply plugin: "com.android.application"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

apply from: '../gradle/plugins/checkstyle-android.gradle'
apply from: '../gradle/plugins/findbugs-android.gradle'

if (rootProject.testCoverage) {
    apply plugin: "jacoco"
}

repositories {
    jcenter()
    google()
}

//noinspection GroovyAssignabilityCheck
configurations.all {
    resolutionStrategy {
        force "com.android.support:support-annotations:${versions.supportLibrary}"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(":pEpJNIAdapter")
    implementation project(':k9mail-library')
    implementation project(':plugins:HoloColorPicker')
    implementation project(':plugins:openpgp-api-lib:openpgp-api')

    implementation "com.squareup.okio:okio:${versions.okio}"
    implementation "commons-io:commons-io:${versions.commonsIo}"
    implementation "androidx.legacy:legacy-support-v4:${versions.androidX}"
    implementation "androidx.appcompat:appcompat:${versions.androidX}"
    implementation "androidx.cardview:cardview:${versions.androidX}"
    implementation "com.google.android.material:material:${versions.androidX}"
    implementation "androidx.appcompat:appcompat:${versions.androidX}"
    implementation "androidx.recyclerview:recyclerview:${versions.androidX}"
    implementation "androidx.vectordrawable:vectordrawable:${versions.androidX}"
    implementation "net.jcip:jcip-annotations:${versions.jcipAnnotations}"

    implementation "com.squareup.moshi:moshi:${versions.moshi}"
    implementation "com.splitwise:tokenautocomplete:${versions.tokenAutoComplete}"
    implementation "com.github.amlcurran.showcaseview:library:${versions.showCaseView}"
    implementation "com.jakewharton.timber:timber:${versions.timber}"
    implementation "com.jakewharton:butterknife:${versions.butterKnife}"
    implementation "com.github.pedrovgs:renderers:${versions.renderers}"
    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    implementation "com.github.AppIntro:AppIntro:${versions.appIntro}"
    implementation "com.daimajia.swipelayout:library:${versions.swipeLayout}@aar"
    implementation "com.karumi:dexter:${versions.dexter}"
    implementation "ch.acra:acra:${versions.acra}"
    implementation "de.cketti.safecontentresolver:safe-content-resolver-v14:${versions.safeContentResolver}"
    implementation "de.hdodenhof:circleimageview:${versions.circleImageView}"
    implementation "org.jsoup:jsoup:${versions.jsoup}"
    implementation "uk.co.chrisjenx:calligraphy:${versions.callygraphy}"
    //implementation "com.klinkerapps:floating-tutorial:1.0.4"
    implementation "com.takisoft.fix:preference-v7:${versions.preferencesFix}"
    implementation "com.takisoft.fix:preference-v7-datetimepicker:${versions.preferencesFix}"
    implementation "com.takisoft.fix:preference-v7-colorpicker:${versions.preferencesFix}"
    implementation "com.takisoft.fix:preference-v7-ringtone:${versions.preferencesFix}"
    implementation "com.evernote:android-job:${versions.androidJob}"
    implementation "androidx.work:work-runtime:${versions.workRuntime}"

    // Arch dependencies
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    implementation "com.google.dagger:dagger:${versions.dagger}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintLayout}"
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycleExtensions}"
    implementation "com.xwray:groupie:${versions.groupie}"
    implementation "com.xwray:groupie-kotlin-android-extensions:${versions.groupie}"
    implementation "org.jetbrains.anko:anko-coroutines:${versions.ankoCoroutines}"
    implementation "org.koin:koin-android-architecture:${versions.koin}"
    implementation "androidx.core:core-ktx:${versions.androidX}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinCoroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutines}"
    implementation "androidx.multidex:multidex:${versions.multidex}"

    androidTestImplementation "androidx.test.espresso:espresso-intents:${versions.espresso}"
    androidTestImplementation ("androidx.test.espresso:espresso-core:${versions.espresso}") {
        exclude module: 'support-annotations'
    }
    androidTestImplementation "androidx.test.uiautomator:uiautomator:${versions.uiAutomator}"

    testImplementation "org.robolectric:robolectric:${versions.robolectric}"
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.jdom:jdom2:${versions.jdom}"

    implementation "androidx.test.espresso:espresso-idling-resource:${versions.espresso}"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:${versions.espresso}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${versions.espresso}"
    testImplementation "androidx.test:core:${versions.androidX}"
    testImplementation "androidx.test.ext:junit:${versions.androidX}"
    testImplementation "androidx.test:rules:${versions.runner_rules}"
    testImplementation "androidx.test:runner:${versions.runner_rules}"

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    testImplementation "org.robolectric:robolectric:${versions.robolectric}"
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "com.google.truth:truth:${versions.truth}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "com.nhaarman:mockito-kotlin:${versions.mockitoKotlin}"
    testImplementation "org.jdom:jdom2:2.0.6"
    testImplementation "org.koin:koin-test:${versions.koin}"
    testImplementation "org.robolectric:shadows-multidex:${versions.robolectric}"

    // Cucumber
    androidTestImplementation('info.cukes:cucumber-android:1.2.4') {
        exclude module: 'cucumber-jvm-deps'
    }

    androidTestImplementation('info.cukes:cucumber-picocontainer:1.2.4') {
        exclude module: 'cucumber-jvm-deps'
    }
    androidTestImplementation 'info.cukes:cucumber-jvm-deps:1.0.5'
    // Screenshots
    androidTestImplementation 'com.squareup.spoon:spoon-client:1.7.1'
    androidTestImplementation('com.schibsted.spain:barista:2.8.0') {
        exclude group: 'com.android.support'
        //exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }
}

android {
    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        applicationId "${appId}"
        versionCode buildConfig.versionCode
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk

        ndkVersion versions.ndk

        setProperty("archivesBaseName", "$buildConfig.versionName-$versionCode")
        generatedDensities = ["mdpi", "hdpi", "xhdpi"]

       //        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testApplicationId "com.fsck.k9.pEp.ui.activities.test"
        testInstrumentationRunner "com.fsck.k9.pEp.ui.activities.runner.CucumberTestRunner"

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true


        buildConfigField "int", "ENGINE_REVISION", "$buildConfig.pEpEngineRevision"
        buildConfigField "int", "ADAPTER_REVISION", "$buildConfig.pEpJNIAdapterRevision"
        buildConfigField "String", "PEP_TEST_EMAIL_ADDRESS", "${pEpTestEmailAddress}"
        buildConfigField "String", "PEP_TEST_EMAIL_PASSWORD", "${pEpTestEmailPassword}"
        buildConfigField "String", "PEP_TEST_EMAIL_SERVER", "${pEpTestEmailServer}"

        buildConfigField "String", "PEP_DRAGON_EMAIL_ADDRESS", "${pEpDragonEmail}"
        buildConfigField "String", "PEP_DRAGON_PASSWORD", "${pEpDragonPassword}"
        buildConfigField "String", "PEP_DRAGON_SERVER", "${pEpDragonServer}"

        buildConfigField "String", "PEP_DRAGON_USERNAME", "${pEpDragonUsername}"

        javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true
    }
    flavorDimensions "playStore", "none"

    productFlavors {
        withkeysync {
            buildConfigField "boolean", "WITH_KEY_SYNC", "true"
            versionName "${buildConfig.versionName}" + ".withKeysync"
            dimension "playStore"

        }
        withoutkeysync {
            buildConfigField "boolean", "WITH_KEY_SYNC", "false"
            versionName "${buildConfig.versionName}" + ".withoutKeysync"
            dimension "playStore"

        }
        playStore {
            dimension "none"
        }
    }
    signingConfigs {
        release
    }
    buildTypes {
        release {
            if (project.hasProperty("storeFile")) {
                signingConfig signingConfigs.release

            }

            buildConfigField "boolean", "DEVELOPER_MODE", "false"
        }

        debug {
            applicationIdSuffix ".debug"
            testCoverageEnabled rootProject.testCoverage

            buildConfigField "boolean", "DEVELOPER_MODE", "true"
        }
    }
    // Do not abort build if lint finds errors
    lintOptions {
        abortOnError false
        lintConfig file("$rootProject.projectDir/config/lint/lint.xml")
    }
    packagingOptions {
        exclude "META-INF/DEPENDENCIES.txt"
        exclude "META-INF/DEPENDENCIES"
        exclude "META-INF/dependencies.txt"
        exclude "META-INF/LICENSE.txt"
        exclude "META-INF/LICENSE"
        exclude "META-INF/license.txt"
        exclude "META-INF/NOTICE.txt"
        exclude "META-INF/NOTICE"
        exclude "META-INF/notice.txt"
        exclude "META-INF/LGPL2.1"
        exclude "META-INF/README"
        exclude "LICENSE.txt"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    productFlavors {
    }

    splits {
        abi {
            enable true
            reset()
            include 'arm64-v8a', 'armeabi-v7a', "x86"
//            include 'arm64-v8a', 'armeabi-v7a', "x86"
//            include "x86"
            universalApk false
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def baseAbiVersionCode = abiCodes.get(output.getFilter(OutputFile.ABI))
            if (baseAbiVersionCode != null) {
                output.versionCodeOverride = baseAbiVersionCode * 10000000 + variant.versionCode
            }
        }
    }

    testOptions{
        unitTests{
            includeAndroidResources = true
        }
    }

    sourceSets {
        test.manifest.srcFile "src/test/AndroidManifest.xml"
        androidTest {
            manifest.srcFile "src/androidTest/AndroidManifest.xml"
            assets.srcDirs = ['src/androidTest/assets']
        }
    }

}

androidExtensions {
    experimental = true
}

/*kotlin {
    experimental {
        coroutines "enable"
    }
}*/

if (project.hasProperty("keyAlias")) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty("keyPassword")) {
    android.signingConfigs.release.keyPassword = keyPassword
}
if (project.hasProperty("storeFile")) {
    android.signingConfigs.release.storeFile = file(storeFile)
}
if (project.hasProperty("storePassword")) {
    android.signingConfigs.release.storePassword = storePassword
}
