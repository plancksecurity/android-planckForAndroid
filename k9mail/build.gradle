import com.android.build.OutputFile

def pEpTestEmailAddress = "\"$System.env.PEP_TEST_EMAIL_ADDRESS\""
def pEpTestEmailPassword = "\"$System.env.PEP_TEST_EMAIL_PASSWORD\""
def pEpTestEmailServer = "\"$System.env.PEP_TEST_EMAIL_SERVER\""


def pEpDragonEmail = "\"$System.env.PEP_DRAGON_EMAIL_ADDRESS\""
def pEpDragonPassword = "\"$System.env.PEP_DRAGON_PASSWORD\""
def pEpDragonServer = "\"$System.env.PEP_DRAGON_SERVER\""
def pEpDragonUsername = "\"$System.env.PEP_DRAGON_USERNAME\""

buildscript {
    repositories {
        mavenCentral()
    }
}

apply plugin: "com.android.application"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'

apply from: '../gradle/plugins/checkstyle-android.gradle'
apply from: '../gradle/plugins/utils/screenshots.gradle'
apply from: '../gradle/plugins/utils/appconfig-test.gradle'
apply from: '../gradle/plugins/utils/git-version.gradle'
apply from: '../gradle/plugins/utils/addaccount.gradle'
apply from: '../gradle/plugins/cucumber.gradle'
apply from: '../gradle/plugins/customTest.gradle'

if (rootProject.testCoverage) {
    apply plugin: "jacoco"
}

repositories {
    jcenter()
    google()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(":pEpJNIAdapter")
    implementation project(':k9mail-library')
    implementation project(':plugins:HoloColorPicker')
    implementation project(':plugins:openpgp-api-lib:openpgp-api')
    implementation project(':foldableFolders')

    implementation 'net.openid:appauth:0.11.1'
    implementation "com.squareup.okio:okio:${versions.okio}"
    implementation "commons-io:commons-io:${versions.commonsIo}"
    implementation "androidx.legacy:legacy-support-v4:${versions.legacySupport}"
    implementation "androidx.appcompat:appcompat:${versions.appCompat}"
    implementation "androidx.cardview:cardview:${versions.cardView}"
    implementation "com.google.android.material:material:${versions.material}"
    implementation "androidx.recyclerview:recyclerview:${versions.recyclerview}"
    implementation "androidx.vectordrawable:vectordrawable:${versions.vectordrawable}"
    implementation "net.jcip:jcip-annotations:${versions.jcipAnnotations}"
    implementation "org.apache.ant:com.springsource.org.apache.tools.ant:${versions.apacheTools}"

    implementation "com.squareup.moshi:moshi:${versions.moshi}"
    implementation "com.splitwise:tokenautocomplete:${versions.tokenAutoComplete}"
    implementation "com.github.amlcurran.showcaseview:library:${versions.showCaseView}"
    implementation "com.jakewharton.timber:timber:${versions.timber}"
    implementation "com.jakewharton:butterknife:${versions.butterKnife}"
    implementation "com.github.pedrovgs:renderers:${versions.renderers}"
    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    implementation "com.github.AppIntro:AppIntro:${versions.appIntro}"
    implementation "com.daimajia.swipelayout:library:${versions.swipeLayout}@aar"
    implementation "com.karumi:dexter:${versions.dexter}"
    implementation "ch.acra:acra:${versions.acra}"
    implementation "de.cketti.safecontentresolver:safe-content-resolver-v14:${versions.safeContentResolver}"
    implementation "de.hdodenhof:circleimageview:${versions.circleImageView}"
    implementation "org.jsoup:jsoup:${versions.jsoup}"
    implementation "androidx.preference:preference:${versions.preference}"
    implementation "com.takisoft.preferencex:preferencex:${versions.preferencesFix}"
    implementation "com.takisoft.preferencex:preferencex-ringtone:${versions.preferencesFix}"
    implementation "com.takisoft.preferencex:preferencex-datetimepicker:${versions.preferencesFix}"
    implementation "com.takisoft.preferencex:preferencex-colorpicker:${versions.preferencesFix}"
    implementation "androidx.webkit:webkit:1.4.0"


    implementation "androidx.work:work-runtime-ktx:${versions.workRuntime}"
    implementation "androidx.security:security-crypto:${versions.crypto}"
    implementation 'com.google.ar.sceneform:filament-android:1.17.1'

    // Arch dependencies
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    implementation "com.google.dagger:dagger:${versions.dagger}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycleViewModel}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintLayout}"
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycleExtensions}"
    implementation "androidx.lifecycle:lifecycle-common:${versions.androidxLifecycle}"
    //implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${versions.androidxLifecycle}"
    implementation "com.xwray:groupie:${versions.groupie}"
    implementation "com.xwray:groupie-kotlin-android-extensions:${versions.groupie}"
    implementation "org.jetbrains.anko:anko-coroutines:${versions.ankoCoroutines}"
    implementation "org.koin:koin-android-architecture:${versions.koin}"
    implementation "androidx.core:core-ktx:${versions.androidXcore}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinCoroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutines}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.kotlinCoroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:${versions.kotlinSerialization}"
    implementation "androidx.multidex:multidex:${versions.multidex}"

    implementation "net.sf.biweekly:biweekly:${versions.biweekly}"

    androidTestImplementation "androidx.test.espresso:espresso-intents:${versions.espresso}"
    androidTestImplementation ("androidx.test.espresso:espresso-core:${versions.espresso}") {
        exclude module: 'support-annotations'
    }
    //implementation "androidx.annotation:annotation:1.1.0"
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.4.0'
    androidTestImplementation "androidx.test.uiautomator:uiautomator:${versions.uiAutomator}"

    testImplementation "org.robolectric:robolectric:${versions.robolectric}"
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.mockito:mockito-inline:${versions.mockito}"
    testImplementation "com.nhaarman:mockito-kotlin:${versions.mockitoKotlin}"
    testImplementation "io.mockk:mockk:${versions.mockk}"
    testImplementation "org.jdom:jdom2:${versions.jdom}"

    implementation "androidx.test.espresso:espresso-idling-resource:${versions.espresso}"

    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:${versions.espresso}"

    androidTestImplementation("androidx.test.espresso:espresso-contrib:${versions.espresso}") {
        exclude module: "protobuf-lite"
    }
    testImplementation "androidx.test:core:${versions.androidXcoreTest}"
    testImplementation "androidx.test.ext:junit:${versions.androidXjunit}"
    androidTestImplementation "androidx.test.ext:junit:${versions.androidXjunit}"
    testImplementation "androidx.test:rules:${versions.runner_rules}"
    testImplementation "androidx.test:runner:${versions.runner_rules}"

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "com.google.truth:truth:${versions.truth}"
    testImplementation "org.jdom:jdom2:${versions.jdom}"
    testImplementation "org.koin:koin-test:${versions.koin}"
    testImplementation "org.robolectric:shadows-multidex:${versions.robolectric}"

    androidTestImplementation "org.mockito:mockito-android:${versions.mockito}"
    androidTestImplementation "com.nhaarman:mockito-kotlin:${versions.mockitoKotlin}"

    // Cucumber
/*    androidTestImplementation('info.cukes:cucumber-android:1.2.4') {
        exclude module: 'cucumber-jvm-deps'
    }

    androidTestImplementation('info.cukes:cucumber-picocontainer:1.2.4') {
        exclude module: 'cucumber-jvm-deps'
    }
    androidTestImplementation 'info.cukes:cucumber-jvm-deps:1.0.5'*/

    /*androidTestImplementation group: 'io.cucumber', name: 'cucumber-java', version: '4.2.3'
    androidTestImplementation group: 'io.cucumber', name: 'cucumber-junit', version: '4.2.3'*/

    androidTestImplementation "io.cucumber:cucumber-android:${versions.cucumber}"
    androidTestImplementation "io.cucumber:cucumber-picocontainer:${versions.cucumber_pico}"

    // Screenshots
    androidTestImplementation 'com.squareup.spoon:spoon-client:1.7.1'
    androidTestImplementation('com.schibsted.spain:barista:2.8.0') {
        exclude group: 'com.android.support'
        //exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }
    kaptAndroidTest "com.google.dagger:dagger-compiler:${versions.dagger}"
}

android {
    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        applicationId "${appId}"
        versionCode 501
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk

        setProperty("archivesBaseName", "${gitVersionName}-${versionCode}")
        generatedDensities = ["mdpi", "hdpi", "xhdpi"]

        testApplicationId "com.fsck.k9.pEp.ui.activities.test"
        testInstrumentationRunner "com.fsck.k9.pEp.ui.activities.test.CucumberTestCase"
        //testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        buildConfigField "String", "PEP_TEST_EMAIL_ADDRESS", "${pEpTestEmailAddress}"
        buildConfigField "String", "PEP_TEST_EMAIL_PASSWORD", "${pEpTestEmailPassword}"
        buildConfigField "String", "PEP_TEST_EMAIL_SERVER", "${pEpTestEmailServer}"

        buildConfigField "String", "PEP_DRAGON_EMAIL_ADDRESS", "${pEpDragonEmail}"
        buildConfigField "String", "PEP_DRAGON_PASSWORD", "${pEpDragonPassword}"
        buildConfigField "String", "PEP_DRAGON_SERVER", "${pEpDragonServer}"

        buildConfigField "String", "PEP_DRAGON_USERNAME", "${pEpDragonUsername}"

        buildConfigField "boolean", "USE_CUCUMBER", "${project.property("useCucumber")}"
        buildConfigField "boolean", "USE_FAKE_RESTRICTIONS_MANAGER", "${project.property("useFakeManager")}"
        buildConfigField "int", "USER", "0"
        testBuildType project.property("testBuildType")
    }

    signingConfigs {
        endUserRelease {
            if (project.hasProperty("keyAlias")) { keyAlias = project.keyAlias }
            if (project.hasProperty("keyPassword")) { keyPassword = project.keyPassword }
            if (project.hasProperty("storeFile")) { storeFile = file(project.storeFile) }
            if (project.hasProperty("storePassword")) { storePassword = project.storePassword }
        }
        enterpriseRelease {
            if (project.hasProperty("enterpriseKeyAlias")) { keyAlias = project.enterpriseKeyAlias }
            if (project.hasProperty("enterpriseKeyPassword")) { keyPassword = project.enterpriseKeyPassword }
            if (project.hasProperty("enterpriseStoreFile")) { storeFile = file(project.enterpriseStoreFile) }
            if (project.hasProperty("enterpriseStorePassword")) { storePassword = project.enterpriseStorePassword }
        }
    }

    flavorDimensions "type", "store"

    productFlavors {

        enterprise {
            buildConfigField "boolean", "IS_ENTERPRISE", "true"
            buildConfigField "boolean", "IS_END_USER", "false"
            buildConfigField "boolean", "IS_DEMO", "false"
            versionName "${gitVersionName}" + ".enterprise"
            dimension "type"
            versionCode 18
            applicationIdSuffix ".enterprise.test.juan2"
        }

        demoCorp {
            buildConfigField "boolean", "IS_ENTERPRISE", "false"
            buildConfigField "boolean", "IS_END_USER", "false"
            buildConfigField "boolean", "IS_DEMO", "true"
            versionName "${gitVersionName}" + ".democorp"
            dimension "type"
            applicationIdSuffix ".demo"
        }

        endUser {
            buildConfigField "boolean", "IS_ENTERPRISE", "false"
            buildConfigField "boolean", "IS_END_USER", "true"
            buildConfigField "boolean", "IS_DEMO", "false"
            versionName "${gitVersionName}"
            dimension "type"
        }

        playStore {
            dimension "store"
        }

        fDroid {
            dimension "store"
        }

    }

    variantFilter { variant ->
        def names = variant.getFlavors()*.name
        if ((names.contains('enterprise') || names.contains('demoCorp')) && names.contains('fDroid')) {
            println("names: $names")
            variant.setIgnore(true)
        }
    }

    buildTypes {
        release {
            debuggable true
            if (project.hasProperty("storeFile")) {
                productFlavors.endUser.signingConfig signingConfigs.endUserRelease
            }
            if (project.hasProperty("enterpriseStoreFile")) {
                productFlavors.enterprise.signingConfig signingConfigs.enterpriseRelease
                productFlavors.demoCorp.signingConfig signingConfigs.enterpriseRelease
            }

            buildConfigField "boolean", "DEVELOPER_MODE", "false"
        }

        debug {
            applicationIdSuffix ".debug"
            testCoverageEnabled rootProject.testCoverage

            buildConfigField "boolean", "DEVELOPER_MODE", "true"
        }
    }
    //testBuildType "release"
    // Do not abort build if lint finds errors
    lintOptions {
        abortOnError false
        lintConfig file("$rootProject.projectDir/config/lint/lint.xml")
    }
    packagingOptions {
        exclude "META-INF/DEPENDENCIES.txt"
        exclude "META-INF/DEPENDENCIES"
        exclude "META-INF/dependencies.txt"
        exclude "META-INF/LICENSE.txt"
        exclude "META-INF/LICENSE"
        exclude "META-INF/license.txt"
        exclude "META-INF/NOTICE.txt"
        exclude "META-INF/NOTICE"
        exclude "META-INF/notice.txt"
        exclude "META-INF/LGPL2.1"
        exclude "META-INF/README"
        exclude "LICENSE.txt"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    productFlavors {
    }

    splits {
        abi {
            enable true
            reset()
            include 'arm64-v8a', 'armeabi-v7a', "x86", "x86_64"
            universalApk true
        }
    }

    applicationVariants.all { variant ->
        defineOAuthConfigs(variant)
        variant.outputs.each { output ->
            def baseAbiVersionCode = abiCodes.get(output.getFilter(OutputFile.ABI))
            if (baseAbiVersionCode != null) {
                output.versionCodeOverride = baseAbiVersionCode * 10000000 + variant.versionCode
            }
        }
    }

    sourceSets {
        test.manifest.srcFile "src/test/AndroidManifest.xml"
        androidTest {
            manifest.srcFile "src/androidTest/AndroidManifest.xml"
            assets.srcDirs = ['src/androidTest/assets']
        }
    }
    testBuildType "release"

}

private static void defineOAuthConfigs(variant) {
    def mergedFlavor = variant.getMergedFlavor()
    mergedFlavor.manifestPlaceholders = ['appAuthRedirectScheme': variant.applicationId.replace("pEp", "pep")]
    switch (variant.name) {
        case "enterprisePlayStoreRelease":
            variant.buildConfigField "String", "OAUTH_GMAIL_CLIENT_ID", "\"690214278127-erualq1hufqvi6beiqdqdc5cej6fu88i.apps.googleusercontent.com\""
            variant.buildConfigField "String", "OAUTH_MICROSOFT_CLIENT_ID", "\"1533a73d-1918-4d6e-b16f-9be285c34e92\""
            variant.buildConfigField "String", "OAUTH_MICROSOFT_REDIRECT_URI", "\"msauth://security.pEp.enterprise/gYfucgrOlZ3FLWgYctqk1bCxZbo%3D\""
            break
        case "enterprisePlayStoreDebug":
            variant.buildConfigField "String", "OAUTH_GMAIL_CLIENT_ID", "\"690214278127-8jckv5bdd0n0fj3nfggajkdn58p9jmbl.apps.googleusercontent.com\""
            variant.buildConfigField "String", "OAUTH_MICROSOFT_CLIENT_ID", "\"f5a5db72-c804-44e9-95ef-0a9380930a43\""
            variant.buildConfigField "String", "OAUTH_MICROSOFT_REDIRECT_URI", "\"msauth://security.pEp.enterprise.debug/gYfucgrOlZ3FLWgYctqk1bCxZbo%3D\""
            break
        case "endUserPlayStoreRelease":
        case "demoCorpPlayStoreRelease":
            variant.buildConfigField "String", "OAUTH_GMAIL_CLIENT_ID", "\"690214278127-e5dg5vtd1p3hk6moncnps67ed02v8rbk.apps.googleusercontent.com\""
            variant.buildConfigField "String", "OAUTH_MICROSOFT_CLIENT_ID", "\"411baad4-1682-4b51-bf3d-5d219b2cfb97\""
            variant.buildConfigField "String", "OAUTH_MICROSOFT_REDIRECT_URI", "\"msauth://security.pEp/NNpRUrCyM0zbAKQkbt3aKegrREA%3D\""
            break
        case "endUserPlayStoreDebug":
        case "demoCorpPlayStoreDebug":
            variant.buildConfigField "String", "OAUTH_GMAIL_CLIENT_ID", "\"690214278127-jqoa776om9fq731beiqap4h52b1hu3bs.apps.googleusercontent.com\""
            variant.buildConfigField "String", "OAUTH_MICROSOFT_CLIENT_ID", "\"b02baebf-9635-41fc-8cf0-023f4fa0b33e\""
            variant.buildConfigField "String", "OAUTH_MICROSOFT_REDIRECT_URI", "\"msauth://security.pEp.debug/ga0RGNYHvNM5d0SLGQfpQWAPGJ8%3D\""
            break
        default:
            variant.buildConfigField "String", "OAUTH_GMAIL_CLIENT_ID", "\"\""
            variant.buildConfigField "String", "OAUTH_MICROSOFT_CLIENT_ID", "\"\""
            variant.buildConfigField "String", "OAUTH_MICROSOFT_REDIRECT_URI", "\"\""
            break
    }
}

androidExtensions {
    experimental = true
}

/*kotlin {
    experimental {
        coroutines "enable"
    }
}*/
